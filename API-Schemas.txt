#===========================================================================================================
session.py
#===========================================================================================================

from sqlalchemy import create_engine

engine = create_engine(
    'mssql+pymssql://preset:Adm1np3set19@mattilda-prod.database.windows.net/mattilda-prod',
    echo=True,
)

#===========================================================================================================
session.py
#===========================================================================================================

from sqlalchemy import create_engine

engine = create_engine(
    'mssql+pymssql://engsandbox1:Operat0r3set03940@mattilda-dev-sql.database.windows.net/Mattilda-Dev',
    echo=True,
)

#===========================================================================================================
session.py
#===========================================================================================================

from sqlalchemy import create_engine

engine = create_engine(
    'mssql+pymssql://devmatt:Matgsg5#76gs#@mattilda-dev-sql.database.windows.net/Mattilda-Dev',
    echo=True,
)

#===========================================================================================================
session.py
#===========================================================================================================

from sqlalchemy import create_engine

engine = create_engine(
    'mssql+pymssql://sandmatt:r$jS^YDsCJce@mattilda-sandbox.database.windows.net/Mattilda-Sandbox',
    echo=True,
)

#===========================================================================================================
api.py
#===========================================================================================================
2022/10/07



from fastapi import APIRouter

from api.v100.routes import students
from api.v100.routes import responsibles
from api.v100.routes import schools
from api.v100.routes import concepts
from api.v100.routes import campus
from api.v100.routes import charges
from api.v100.routes import discounts
from api.v100.routes import schoolarships
from api.v100.routes import payments
from api.v100.routes import users

router = APIRouter()

router.include_router(students.router, prefix="/students")
router.include_router(responsibles.router, prefix="/responsibles")
router.include_router(schools.router, prefix="/schools")
router.include_router(concepts.router, prefix="/concepts")
router.include_router(campus.router, prefix="/campus")
router.include_router(charges.router, prefix="/charges")
router.include_router(discounts.router, prefix="/discounts")
router.include_router(schoolarships.router, prefix="/schoolarships")
router.include_router(payments.router, prefix="/payments")
router.include_router(users.router, prefix="/users")




#===========================================================================================================
Schemas
#===========================================================================================================
2022/10/08 CAMPUS
#===========================================================================================================

from datetime import datetime

from typing import Optional

from pydantic import BaseModel

class CampusRead(BaseModel):
    campus_name: str
    street: Optional[str] = None
    suburb_id: str
    suburb: Optional[str] = None    
    municipality_id: Optional[str] = None
    state_id: Optional[str] = None
    zip: str
    college_id: str
    status_id: str
    registration_date: datetime

class CampusbynameRead(BaseModel):
    campus_id: int
    campus_name: str
    street: Optional[str] = None
    suburb_id: str
    suburb: Optional[str] = None
    municipality_id: Optional[str] = None
    state_id: Optional[str] = None
    zip: str
    college_id: str
    status_id: str
    registration_date: datetime            

class CampusPost(BaseModel):
    campus_name: str
    street: Optional[str] = None
    suburb_id: str
    suburb: Optional[str] = None
    municipality_id: Optional[str] = None
    state_id: Optional[str] = None
    zip: str
    college_id: str
    status_id: str
    registration_date: datetime 
   
#===========================================================================================================	
#===========================================================================================================	
#===========================================================================================================	
2022/10/08 CHARGES
#===========================================================================================================	

from datetime import date, datetime

from typing import Optional

from pydantic import BaseModel


class ChargeRead(BaseModel):
    transaction_id: int
    period: Optional[str] = None
    concept: Optional[str] = None
    concept_id: Optional[str] = None
    amount: str
    balance: str
    user_id: int
    expiration_date: date
    registration_date: datetime 
    transaction_id_old: Optional[str] = None


class ChargebynameRead(BaseModel):   
    student_id: int
    transaction_id: int
    period: Optional[str] = None
    concept: Optional[str] = None
    concept_id: Optional[str] = None
    amount: str
    balance: str
    user_id: int
    expiration_date: date
    registration_date: datetime 
    transaction_id_old: Optional[str] = None


class ChargeCreate(BaseModel):
    student_id: int
    transaction_id: int
    period: Optional[str] = None
    concept: Optional[str] = None
    concept_id: Optional[str] = None
    amount: str
    balance: str
    user_id: int
    expiration_date: date
    registration_date: date
    transaction_id_old: Optional[str] = None
    
    
#===========================================================================================================	        
#===========================================================================================================	
#===========================================================================================================
2022/10/12 CONCETPS
#===========================================================================================================	

from datetime import datetime

from typing import Optional 
from typing import Union


from pydantic import BaseModel

class ConceptsRead(BaseModel):
    concepts: Optional[str] = None
    category: Union[str, int]
    provserv_key: Optional[int] = None
    unit_key: Union[str, int] = None
    college_id: int 
    period_id: Optional[int] = None
    program_id: Optional[int] = None
    level_id: Optional[int] = None
    registration_date: datetime = datetime.now() 
    
class ConceptsbynameRead(BaseModel):
    concepts_id: Union[str, int]
    concept: Optional[str] = None
    category: Union[str, int]
    provserv_key: Optional[int] = None
    unit_key: Union[str, int] = None
    college_id: int 
    period_id: Optional[int] = None
    program_id: Optional[int] = None
    level_id: Optional[int] = None
    registration_date: datetime = datetime.now() 

class ConceptsbyInsert(BaseModel):
    concepts_id: Union[str, int]
    concepts: Optional[str] = None
    category: Union[str, int]
    provserv_key: Optional[int] = None
    unit_key: Union[str, int] = None
    college_id: int 
    period_id: Optional[int] = None
    program_id: Optional[int] = None
    level_id: Optional[int] = None
    registration_date: datetime = datetime.now() 
	
    

#===========================================================================================================	
#===========================================================================================================





from datetime import datetime

from sys import float_repr_style

from typing import Optional

from pydantic import BaseModel

class DiscountsRead(BaseModel):
    concept_id: str
    desctype_id: int
    days_period: Optional[str] = None
    date_application: Optional[datetime] = None
    type_amount: str
    percentage: Optional[float] = None
    amount: Optional[float] = None
    concept_id_applies: str
    status_id: str
    user_id: int
    activity_date: datetime

class DiscountstypeRead(BaseModel):
    config_id_d: int
    concept_id: str
    desctype_id: int
    days_period: Optional[str] = None
    date_application: Optional[datetime] = None
    type_amount: str
    percentage: Optional[float] = None
    amount: Optional[float] = None
    concept_id_applies: str
    status_id: str
    user_id: int
    activity_date: datetime
    
#===========================================================================================================	

from contextlib import nullcontext

from datetime import date, datetime

from typing import Union, Optional

from pydantic import BaseModel

class PaymentsRead(BaseModel):
    transact_id: int
    transaction_charge_id: str
    concepts_id: Optional[str] = None
    concepts: Optional[str] = None
    payment_amount: str
    amount_applied: str
    status_id: str
    uid_cfdi: Optional[str] = None
    payment_id: str
    user_id: int
    pay_day: date
    registration_date: datetime
    transaction_id_old: Optional[str] = None 
    transaction_id_charge_old: Optional[str] = None

class PaymentsbytransaccionRead(BaseModel):
    alumno_id: int
    transact_id: int
    transaction_charge_id: str
    concepts_id: Optional[str] = None
    concepts: Optional[str] = None
    payment_amount: str
    amount_applied: str
    status_id: str
    uid_cfdi: Optional[str] = None
    payment_id: str
    user_id: int
    pay_day: date
    registration_date: datetime   
    transaction_id_old: Optional[str] = None 
    transaction_id_charge_old: Optional[str] = None


#===========================================================================================================	
#===========================================================================================================
2022/10/07


from datetime import datetime

from typing import Optional

from pydantic import BaseModel

class ResponsiblesRead(BaseModel):
    responsable_name: str
    father_name: str
    mother_name: Optional[str] = None
    college_uid: Optional[str] = None
    curp: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    contact_pref: str
    alumno_id: int
    status: str
    registration_date: datetime
    activity_date: datetime

class ResponsiblesbynameRead(BaseModel):
    responsable_id: int
    responsable_name: str
    father_name: str
    mother_name: Optional[str] = None
    college_uid: Optional[str] = None
    curp: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    contact_pref: str
    alumno_id: int
    status: str
    registration_date: datetime
    activity_date: datetime



#===========================================================================================================
#===========================================================================================================	
2022/10/14

from datetime import date

from typing import Optional

from pydantic import BaseModel

class SchoolarshipsRead(BaseModel):
    concept_id: str
    type_amount: str
    percentage: Optional[float] = None
    amount: Optional[float] = None
    concept_applies_id: str
    reason: Optional[str] = None
    status_id: str
    user_id: int
    activity_date: date

class SchoolarshipCreate(BaseModel):
    concept_id: str
    type_amount: str
    percentage: Optional[float] = None
    amount: Optional[float] = None
    concept_applies_id: str
    reason: Optional[str] = None
    status_id: str
    user_id: int
    activity_date: date


#===========================================================================================================	
#===========================================================================================================
2022/10/07


from datetime import date

from typing import Optional

from pydantic import BaseModel

class SchoolRead(BaseModel):
    college_name: str
    street: Optional[str] = None
    suburb: Optional[str] = None
    suburb_id: int
    municipality_id: Optional[int] = None
    state_id: Optional[int] = None
    zip: int
    status_id: str
    registration_date: date
    c_cards: Optional[float] = None 
    c_oxxo: Optional[float] = None

class SchoolbynameRead(BaseModel):
    college_id: int
    college_name: str
    street: Optional[str] = None
    suburb: Optional[str] = None
    suburb_id: int
    municipality_id: Optional[int] = None
    state_id: Optional[int] = None
    zip: int
    status_id: str
    registration_date: date
    c_cards: Optional[float] = None 
    c_oxxo: Optional[float] = None

class SchoolCreate(BaseModel):
    college_id: int
    college_name: str
    street: Optional[str] = None
    suburb_id: int
    suburb: Optional[str] = None   
    municipality_id: Optional[int] = None
    state_id: Optional[int] = None
    zip: int
    status_id: str
    registration_date: date
    c_cards: Optional[float] = None 
    c_oxxo: Optional[float] = None



#===========================================================================================================
#===========================================================================================================
UPDATE 2022/10/10

from datetime import date

from typing import Optional
from typing import Union

from pydantic import BaseModel

class StudentRead(BaseModel):
    num_control: Optional[int] = None
    student_name: str
    father_name: str
    mother_name: Optional[str] = None
    curp: str
    level_id: Optional[int] = None
    level: Optional[str] = None
    incorporation_key: Optional[str] = None
    college_id: int
    campus_id: Optional[str] = None
    degree: Optional[str] = None
    cluster: Optional[str] = None
    status_id: Union[str, int]
    registration_date: date
    
class StudentbynameRead(BaseModel):
    student_id: int
    num_control: Optional[str] = None
    student_name: str
    father_name: str
    mother_name: Optional[str] = None    
    curp: str
    level_id: Optional[int] = None
    level: Optional[str] = None
    incorporation_key: Optional[str] = None
    college_id: int
    campus_id: Optional[str] = None
    degree: Optional[str] = None
    cluster: Optional[str] = None
    status_id: Union[str, int]
    registration_date: date

class StudentCreate(BaseModel):
    student_id: int
    num_control: Optional[str] = None
    student_name: str
    father_name: str
    mother_name: Optional[str] = None    
    curp: str
    level_id: Optional[int] = None
    level: Optional[str] = None
    incorporation_key: Optional[str] = None
    college_id: int
    campus_id: Optional[str] = None
    degree: Optional[str] = None
    cluster: Optional[str] = None
    status_id: Union[str, int]
    registration_date: date


#===========================================================================================================	
#===========================================================================================================




Buenos dias a todos equipo.
La frase de hoy es del autor Fellini, Federico:
"Un buen vino es como una buena película: dura un instante y te deja en la boca un sabor a gloria; es nuevo en cada sorbo y , como ocurre con las películas, nace y renace en cada saboreador."
Que todos pasen un lindo Viernes, vispera de fin de semana.
                                                                                                                                                                    